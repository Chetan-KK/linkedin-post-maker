{
  "title": "Unlocking the Power of 3D Web Development with Three.js",
  "description": "Dive into the world of Three.js and discover how it empowers you to create stunning and interactive 3D experiences on the web.",
  "hashtags": [
    "#threejs",
    "#webdev",
    "#3d",
    "#javascript",
    "#gamedev",
    "#webgl",
    "#interactive",
    "#webdesign"
  ],
  "content": [
    {
      "name": "What is Three.js?",
      "description": "Three.js is a powerful JavaScript library that simplifies 3D graphics programming for the web. It leverages WebGL to render 3D scenes directly in your browser, opening up a world of possibilities.",
      "codeLang": "none",
      "code": ""
    },
    {
      "name": "Getting Started",
      "description": "Setting up Three.js is straightforward. You can easily include the library in your project and begin creating your first 3D scene.",
      "codeLang": "javascript",
      "code": "<!DOCTYPE html>\n<html>\n<head>\n <title>Three.js Example</title>\n <style>\n body { margin: 0; }\n </style>\n</head>\n<body>\n <script src='https://threejs.org/build/three.js'></script>\n <script>\n // Create a scene, camera, and renderer\n const scene = new THREE.Scene();\n const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n const renderer = new THREE.WebGLRenderer();\n renderer.setSize(window.innerWidth, window.innerHeight);\n document.body.appendChild(renderer.domElement);\n\n // Create a cube geometry\n const geometry = new THREE.BoxGeometry(1, 1, 1);\n const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n const cube = new THREE.Mesh(geometry, material);\n scene.add(cube);\n\n // Render the scene\n function animate() {\n requestAnimationFrame(animate);\n renderer.render(scene, camera);\n }\n animate();\n </script>\n</body>\n</html>"
    },
    {
      "name": "Creating 3D Objects",
      "description": "Three.js provides a wide range of pre-built geometry primitives like cubes, spheres, and cylinders. You can also create custom geometries using vertices, faces, and other methods.",
      "codeLang": "javascript",
      "code": "const geometry = new THREE.BoxGeometry(1, 1, 1); // Create a cube\nconst geometry = new THREE.SphereGeometry(1, 32, 32); // Create a sphere\nconst geometry = new THREE.CylinderGeometry(1, 1, 2, 32); // Create a cylinder"
    },
    {
      "name": "Materials and Textures",
      "description": "Apply materials to your 3D objects to control their appearance, including color, texture, lighting, and more. You can use built-in materials or create your own custom materials.",
      "codeLang": "javascript",
      "code": "const material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Red color\nconst material = new THREE.MeshLambertMaterial({ color: 0xffffff }); // White lambert material\nconst texture = new THREE.TextureLoader().load('image.jpg'); // Load a texture\nconst material = new THREE.MeshBasicMaterial({ map: texture }); // Apply the texture to a material"
    },
    {
      "name": "Lighting and Effects",
      "description": "Enhance your 3D scenes with lighting and special effects. You can add different types of lights, such as ambient, directional, and point lights, to create realistic lighting effects.",
      "codeLang": "javascript",
      "code": "const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Ambient light\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Directional light\nconst pointLight = new THREE.PointLight(0xffffff, 1, 100); // Point light"
    },
    {
      "name": "Animations and Interactions",
      "description": "Bring your 3D creations to life with animations and user interactions. You can animate objects using the built-in animation system or use external libraries.",
      "codeLang": "javascript",
      "code": "// Rotate a cube over time\nfunction animate() {\n cube.rotation.y += 0.01;\n renderer.render(scene, camera);\n requestAnimationFrame(animate);\n}"
    }
  ]
}
